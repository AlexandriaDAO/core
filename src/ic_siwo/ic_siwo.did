type Challenge = record {
  created_at : nat64;
  nonce : text;
  expires_at : nat64;
};
type ChallengeError = variant {
  InvalidSignature;
  ChallengeExpired;
  ChallengeInvalid;
  ChallengeNotFound;
  InvalidPublicKey : text;
  SignatureVerificationFailed;
  TooManyChallenges;
};
type Delegation = record {
  pubkey : blob;
  targets : opt vec principal;
  expiration : nat64;
};
type Icrc21ConsentInfo = record {
  metadata : Icrc21ConsentMessageMetadata;
  consent_message : Icrc21ConsentMessage;
};
type Icrc21ConsentMessage = variant {
  FieldsDisplayMessage : record {
    fields : vec record { text; text };
    intent : text;
  };
  GenericDisplayMessage : text;
};
type Icrc21ConsentMessageMetadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type Icrc21ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : Icrc21ConsentMessageSpec;
};
type Icrc21ConsentMessageSpec = record {
  metadata : Icrc21ConsentMessageMetadata;
  device_spec : opt Icrc21DeviceSpec;
};
type Icrc21DeviceSpec = variant { GenericDisplay; FieldsDisplay };
type Icrc21Error = variant {
  GenericError : record { description : text; error_code : nat };
  InsufficientPayment : Icrc21ErrorInfo;
  UnsupportedCanisterCall : Icrc21ErrorInfo;
  ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text };
type LoginDetails = record { user_canister_pubkey : blob; expiration : nat64 };
type Result = variant { Ok : principal; Err : text };
type Result_1 = variant { Ok : blob; Err : text };
type Result_2 = variant { Ok : Icrc21ConsentInfo; Err : Icrc21Error };
type Result_3 = variant { Ok : Challenge; Err : ChallengeError };
type Result_4 = variant { Ok : SignedDelegation; Err : text };
type Result_5 = variant { Ok : LoginDetails; Err : text };
type SettingsInput = record {
  uri : text;
  challenge_expires_in : opt nat64;
  domain : text;
  statement : opt text;
  scheme : opt text;
  salt : text;
  session_expires_in : opt nat64;
  targets : opt vec text;
};
type SignedDelegation = record { signature : blob; delegation : Delegation };
service : (SettingsInput) -> {
  // Retrieves the OISY principal associated with the caller's IC principal.
  // 
  // This query function provides a convenient way for a caller to discover their
  // associated OISY principal identity. It uses the caller's IC principal to look up
  // the corresponding OISY principal in the mapping maintained by the system.
  // 
  // # Authentication Context
  // This function is part of the identity mapping system that maintains bidirectional
  // relationships between Internet Computer principals and OISY principals. It helps
  // applications translate between these two identity systems.
  // 
  // # Returns
  // * `Ok(Principal)` - The caller's OISY principal if found in the mapping.
  // * `Err(String)` - An error message if no mapping exists for the caller.
  // 
  // # Example
  // ```javascript
  // // In a frontend application:
  // const result = await canister.get_caller_oisy_principal();
  // if ('Ok' in result) {
  // console.log(`Your OISY principal is: ${result.Ok.toText()}`);
  // } else {
  // console.error(`Error: ${result.Err}`);
  // }
  // ```
  // 
  // # Use Cases
  // - Allowing users to see their OISY identity
  // - Integrating with OISY-specific services
  // - Verifying cross-platform identity relationships
  get_caller_oisy_principal : () -> (Result) query;
  // Retrieves the IC principal associated with a given OISY principal.
  // 
  // This query function looks up the Internet Computer principal corresponding
  // to a provided OISY principal. It's useful for cross-referencing identities
  // between the two systems.
  // 
  // # Parameters
  // * `oisy_principal`: The OISY principal to look up.
  // 
  // # Returns
  // * `Ok(ByteBuf)` - The IC principal as bytes if found.
  // * `Err(String)` - An error message if no mapping exists.
  // 
  // # Implementation Note
  // The function returns the IC principal as a ByteBuf (rather than a Principal type)
  // to maintain compatibility with certain cross-platform integrations.
  // 
  // # Example
  // ```javascript
  // // Given an OISY principal
  // const oisyPrincipal = Principal.fromText("un4fu-tqaaa-aaaab-qadjq-cai");
  // 
  // // Look up the corresponding IC principal
  // const result = await canister.get_ic_principal(oisyPrincipal);
  // if ('Ok' in result) {
  // // Convert the ByteBuf to a Principal
  // const icPrincipal = Principal.fromUint8Array(result.Ok);
  // console.log(`Corresponding IC principal: ${icPrincipal.toText()}`);
  // } else {
  // console.error(`Error: ${result.Err}`);
  // }
  // ```
  // 
  // # Security Consideration
  // This mapping is publicly queryable, which allows looking up the relationship
  // between OISY and IC principals. Applications should consider this when designing
  // their privacy model.
  get_ic_principal : (principal) -> (Result_1) query;
  // Retrieves the OISY principal associated with a given IC principal.
  // 
  // This internal helper function looks up the OISY principal corresponding
  // to a provided IC principal. It's used both by the `get_caller_oisy_principal`
  // query and potentially by other internal functions.
  // 
  // # Parameters
  // * `principal`: The IC principal to look up.
  // 
  // # Returns
  // * `Ok(Principal)` - The corresponding OISY principal if found.
  // * `Err(String)` - An error message if no mapping exists.
  // 
  // # Implementation Details
  // This function accesses the IC_OISY thread-local storage to look up the mapping.
  // It provides a consistent way to translate from IC to OISY identities throughout
  // the system.
  // 
  // # Example (Internal Usage)
  // ```
  // use candid::Principal;
  // use crate::queries::get_oisy_principal;
  // 
  // // Given an IC principal
  // let ic_principal = Principal::from_text("rrkah-fqaaa-aaaaa-aaaaq-cai").unwrap();
  // 
  // // Look up the corresponding OISY principal
  // match get_oisy_principal(ic_principal) {
  // Ok(oisy_principal) => {
  // // Use the OISY principal for some operation
  // println!("Found OISY principal: {}", oisy_principal);
  // },
  // Err(e) => println!("Lookup failed: {}", e),
  // }
  // ```
  get_oisy_principal : (principal) -> (Result) query;
  icrc21_canister_call_consent_message : (Icrc21ConsentMessageRequest) -> (
      Result_2,
    );
  // Creates a new challenge for the specified principal.
  // 
  // This canister update method generates a new challenge associated with the
  // provided principal. The challenge contains a secure random nonce that can be
  // used in signature-based authentication flows.
  // 
  // # Parameters
  // - `principal`: The Internet Computer principal for which to create a challenge
  // 
  // # Returns
  // - `Ok(Challenge)`: A new challenge with a random nonce and expiration time
  // - `Err(ChallengeError)`: If the challenge creation failed
  // 
  // # Example Usage (from a frontend)
  // ```javascript
  // // In a frontend application:
  // const challengeResult = await canister.siwo_challenge(userPrincipal);
  // if ('Ok' in challengeResult) {
  // const challenge = challengeResult.Ok;
  // console.log(`Got challenge: ${challenge.nonce}`);
  // console.log(`Challenge expires at: ${challenge.expires_at}`);
  // 
  // // The challenge can now be used in a signature verification flow
  // // where the user signs the challenge nonce with their private key
  // } else {
  // console.error(`Error getting challenge: ${challengeResult.Err}`);
  // }
  // ```
  // 
  // # Notes
  // - Each principal has a limited number of active challenges (typically 10)
  // - The oldest challenges are automatically pruned when this limit is reached
  // - Challenges automatically expire after a configured time period
  siwo_challenge : (principal) -> (Result_3);
  // Creates a signed delegation for a session key.
  // 
  // This query method generates a cryptographically-signed delegation that allows
  // a session key to act on behalf of a user. The delegation is certified by the
  // canister, proving its authenticity when presented to other canisters.
  // 
  // # Authentication Flow
  // 1. User's app generates a session key pair
  // 2. App calls this function with the user's principal, session public key, and desired expiration
  // 3. Canister returns a signed delegation
  // 4. App can use this delegation to authenticate with other canisters
  // 
  // # Parameters
  // - `oisy_principal`: The principal identity of the user delegating authority
  // - `session_key`: The public key that will be delegated authority (typically an ephemeral session key)
  // - `expiration`: Timestamp (in nanoseconds) when the delegation should expire
  // 
  // # Returns
  // - `Ok(SignedDelegation)`: A delegation with a certified signature from this canister
  // - `Err(String)`: Error message if delegation creation fails
  // 
  // # Certificate Authentication
  // This function must be called as a query because it uses the data certificate
  // mechanism of the Internet Computer to create a certified signature. This
  // signature proves that the delegation was created by this canister and has not
  // been tampered with.
  // 
  // # Example Usage (from a frontend)
  // ```javascript
  // // Generate a session key pair (in the browser)
  // const sessionKeyPair = await generateEd25519KeyPair();
  // const sessionPublicKey = sessionKeyPair.publicKey;
  // 
  // // Set expiration to 8 hours from now
  // const eightHoursInNanos = BigInt(8 * 60 * 60) * BigInt(1_000_000_000);
  // const expirationTime = BigInt(Date.now()) * BigInt(1_000_000) + eightHoursInNanos;
  // 
  // // Request a signed delegation
  // const result = await canister.siwo_get_delegation(
  // userPrincipal,
  // sessionPublicKey,
  // expirationTime
  // );
  // 
  // if ('Ok' in result) {
  // const signedDelegation = result.Ok;
  // // Store the delegation and session key for future authentication
  // localStorage.setItem('delegation', JSON.stringify(signedDelegation));
  // localStorage.setItem('sessionPrivateKey', sessionKeyPair.privateKey);
  // } else {
  // console.error('Failed to get delegation:', result.Err);
  // }
  // ```
  // 
  // # Security Considerations
  // - The expiration time should be set to a reasonable duration (typically hours, not days)
  // - The session key should be stored securely and never shared
  // - When the delegation expires, a new one should be requested
  siwo_get_delegation : (principal, blob, nat64) -> (Result_4) query;
  // Authenticates the user using Sign In With OISY (SIWO) protocol.
  // 
  // This function verifies the signature of the challenge, creates a delegation
  // for the session key, and returns login details for successful authentication.
  // This is the main authentication entry point for the SIWO protocol.
  // 
  // # Authentication Flow
  // 1. Client calls `siwo_challenge` to get a challenge with a nonce
  // 2. Client signs the challenge with their private key
  // 3. Client calls this function with the signature, session key, and nonce
  // 4. If verification succeeds, a delegation is created for the session key
  // 5. Client receives login details with expiration and user canister public key
  // 
  // # Parameters
  // - `signature`: Cryptographic signature of the challenge message
  // - `session_key`: Public key for the session (used to create a delegation)
  // - `nonce`: The nonce from the previously issued challenge
  // 
  // # Returns
  // - `Ok(LoginDetails)`: User's authentication details if login succeeds
  // - `Err(String)`: Error message if login fails
  // 
  // # Error Conditions
  // - Anonymous principal is not allowed to call this function
  // - Challenge not found, expired, or signature validation fails
  // - Issues with delegation creation or session key
  // 
  // # Example Usage (from a frontend)
  // ```javascript
  // // After getting a challenge and signing it with the user's private key
  // const loginResult = await canister.siwo_login(
  // signatureBytes,      // Signature of the challenge message
  // sessionPublicKey,    // Public key for this session
  // challenge.nonce      // Nonce from the challenge
  // );
  // 
  // if ('Ok' in loginResult) {
  // const { expiration, user_canister_pubkey } = loginResult.Ok;
  // console.log(`Login successful! Session expires at: ${new Date(Number(expiration/1000000n))}`);
  // 
  // // Store the session information
  // localStorage.setItem('expiration', expiration.toString());
  // localStorage.setItem('userCanisterPubkey', user_canister_pubkey);
  // } else {
  // console.error(`Login failed: ${loginResult.Err}`);
  // }
  // ```
  // 
  // # Security Considerations
  // - The caller's principal must be authenticated (non-anonymous)
  // - The challenge signature is verified cryptographically
  // - Challenges are single-use and automatically consumed
  // - Expired challenges and signatures are regularly pruned
  siwo_login : (blob, blob, text) -> (Result_5);
  whoami : () -> (principal) query;
}
