type ArweaveNft = record {
  status : NftStatus;
  token_id : nat;
  owner : principal;
  time : nat64;
  arweave_id : text;
  price : nat64;
};
type ListingsQuery = record {
  sort_by : SortBy;
  page_size : nat64;
  page : nat64;
  sort_order : SortOrder;
  selected_user : opt principal;
  search_term : opt text;
};
type ListingsResponse = record {
  page_size : nat64;
  nfts : vec ArweaveNft;
  page : nat64;
  total_pages : nat64;
  total_count : nat64;
  has_next : bool;
  has_prev : bool;
};
type LogAction = variant {
  Listed : record { price : nat64 };
  Sold : record { price : nat64 };
  PriceUpdate : record { new_price : nat64; old_price : nat64 };
  Removed;
  ReimbursedToBuyer;
};
type LogEntry = record {
  action : LogAction;
  token_id : nat;
  seller : principal;
  timestamp : nat64;
  buyer : principal;
};
type Logs = record {
  page_size : nat64;
  logs : vec record { nat64; LogEntry };
  total_pages : nat64;
  current_page : nat64;
};
type Nft = record {
  status : NftStatus;
  token_id : nat;
  owner : principal;
  time : nat64;
  price : nat64;
};
type NftStatus = variant { Listed; Reimbursed };
type Result = variant { Ok : text; Err : text };
type SortBy = variant { Time; Price };
type SortOrder = variant { Asc; Desc };
service : {
  arweave_id_to_nat : (text) -> (nat) query;
  buy_nft : (nat) -> (Result);
  get_caller_logs : (opt nat64, opt nat64, opt nat) -> (Logs) query;
  get_listed_tokens : (vec nat) -> (vec opt Nft) query;
  get_listing_users : () -> (vec principal) query;
  get_listings : (ListingsQuery) -> (ListingsResponse) query;
  get_logs : (opt nat64, opt nat64, opt nat) -> (Logs) query;
  is_arweave_id : (text) -> (bool) query;
  list_nft : (nat, nat64) -> (Result);
  nat_to_arweave_id : (nat) -> (text) query;
  remove_nft_listing : (nat) -> (Result);
  update_nft_price : (nat, nat64) -> (Result);
}
