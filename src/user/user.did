type CreateEngineRequest = record {
  key : text;
  title : text;
  active : bool;
  host : text;
  index : text;
};
type CreateNodeRequest = record { key : text; active : bool };
type Engine = record {
  id : nat64;
  key : text;
  title : text;
  updated_at : nat64;
  active : bool;
  owner : principal;
  host : text;
  created_at : nat64;
  index : text;
};
type Node = record {
  id : nat64;
  key : text;
  updated_at : nat64;
  active : bool;
  owner : principal;
  created_at : nat64;
};
type Result = variant { Ok : UsernameAvailabilityResponse; Err : text };
type Result_1 = variant { Ok : Engine; Err : text };
type Result_2 = variant { Ok : Node; Err : text };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok : User; Err : text };
type Result_5 = variant { Ok : vec Engine; Err : text };
type Result_6 = variant { Ok : vec Node; Err : text };
type SignupRequest = record { username : text };
type UpdateEngineStatusRequest = record { id : nat64; active : bool };
type UpdateNodeStatusRequest = record { id : nat64; active : bool };
type UpdateUserRequest = record {
  username : text;
  name : opt text;
  avatar : opt text;
};
type User = record {
  updated_at : nat64;
  "principal" : principal;
  librarian : bool;
  username : text;
  name : text;
  created_at : nat64;
  avatar : text;
};
type UserPrincipalInfo = record { "principal" : principal; username : text };
type UsernameAvailabilityResponse = record {
  username : text;
  available : bool;
  message : text;
};
service : {
  check_username_availability : (text) -> (Result) query;
  // Creates a new engine for the authenticated user
  create_engine : (CreateEngineRequest) -> (Result_1);
  // Creates a new node for the authenticated user
  create_node : (CreateNodeRequest) -> (Result_2);
  // Deletes a engine owned by the caller
  delete_engine : (nat64) -> (Result_3);
  // Deletes a node owned by the caller
  delete_node : (nat64) -> (Result_3);
  // Returns active engines for a specific user or all active engines if no user specified
  get_active_engines : (opt principal) -> (vec Engine) query;
  // Returns active nodes for a specific user or all active nodes if no user specified
  get_active_nodes : (opt principal) -> (vec Node) query;
  get_all_users : () -> (vec UserPrincipalInfo) query;
  get_current_user : () -> (Result_4) query;
  // Retrieves multiple engines by their ids
  // Returns a vector of engines, skipping any IDs that don't exist
  get_engines : (vec nat64) -> (Result_5) query;
  // Retrieves multiple engines by their ids
  // Returns error if any of the requested engines don't exist
  get_engines_strict : (vec nat64) -> (Result_5) query;
  get_my_active_engines : () -> (vec Engine) query;
  get_my_active_nodes : () -> (vec Node) query;
  get_my_engines : () -> (vec Engine) query;
  get_my_nodes : () -> (vec Node) query;
  // Retrieves multiple nodes by their ids
  // Returns a vector of nodes, skipping any IDs that don't exist
  get_nodes : (vec nat64) -> (Result_6) query;
  // Retrieves multiple nodes by their ids
  // Returns error if any of the requested nodes don't exist
  get_nodes_strict : (vec nat64) -> (Result_6) query;
  get_user : (principal) -> (Result_4) query;
  get_user_engines : (principal) -> (vec Engine) query;
  get_user_nodes : (principal) -> (vec Node) query;
  signup : (SignupRequest) -> (Result_4);
  // Updates an existing engine's status
  update_engine_status : (UpdateEngineStatusRequest) -> (Result_1);
  // Updates an existing node's status
  update_node_status : (UpdateNodeStatusRequest) -> (Result_2);
  update_profile : (UpdateUserRequest) -> (Result_4);
  upgrade_to_librarian : () -> (Result_4);
  whoami : () -> (principal) query;
}
