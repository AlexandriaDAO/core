type AddSlotInput = record {
  content : SlotContent;
  reference_slot_id : opt nat32;
  before : bool;
};
type QueryError = variant {
  ShelfNotFound;
  UnauthorizedAccess;
  NftNotFound;
  InvalidTimeRange;
  UserNotFound;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : vec Shelf; Err : QueryError };
type Result_2 = variant { Ok : Shelf; Err : QueryError };
type Result_3 = variant { Ok : vec Slot; Err : QueryError };
type Shelf = record {
  title : text;
  updated_at : nat64;
  owner : principal;
  description : opt text;
  created_at : nat64;
  shelf_id : text;
  slots : vec record { nat32; Slot };
  slot_positions : vec record { nat32; float64 };
};
type ShelfUpdate = record {
  title : opt text;
  description : opt text;
  slots : opt vec Slot;
};
type Slot = record { id : nat32; content : SlotContent; position : nat32 };
type SlotContent = variant { Nft : text; Markdown : text };
type SlotReorderInput = record {
  slot_id : nat32;
  reference_slot_id : opt nat32;
  before : bool;
};
service : {
  add_shelf_slot : (text, AddSlotInput) -> (Result);
  delete_shelf : (text) -> (Result);
  get_recent_shelves : (opt nat64, opt nat64) -> (Result_1) query;
  get_shelf : (text) -> (Result_2) query;
  get_shelf_slots : (text) -> (Result_3) query;
  get_user_shelves : (principal, opt nat64) -> (Result_1) query;
  reorder_shelf_slot : (text, SlotReorderInput) -> (Result);
  store_shelf : (text, opt text, vec Slot) -> (Result);
  update_shelf : (text, ShelfUpdate) -> (Result);
}
