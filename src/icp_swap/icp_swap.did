type ArchiveBalance = record { icp : nat64 };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Stake = record { time : nat64; reward_icp : nat64; amount : nat64 };
service : () -> {
  burn_LBRY : (nat64) -> (Result);
  caller_subaccount : () -> (text) query;
  claim_icp_reward : () -> (Result);
  distribute_reward : () -> (Result);
  distribute_reward_wrapper : () -> ();
  get_all_apy_values : () -> (vec record { nat32; nat }) query;
  get_all_stakes : () -> (vec record { principal; Stake }) query;
  get_current_LBRY_ratio : () -> (nat64) query;
  get_current_staking_reward_percentage : () -> (text) query;
  get_icp_rate_cents_wrapper : () -> ();
  get_icp_rate_in_cents : () -> (Result_1);
  get_maximum_LBRY_burn_allowed : () -> (Result_1) query;
  get_scaling_factor : () -> (nat) query;
  get_stake : (principal) -> (opt Stake) query;
  get_total_archived_balance : () -> (nat64) query;
  get_total_icp_avialable : () -> (nat64) query;
  get_total_staked : () -> (nat64) query;
  get_total_unclaimed_icp_reward : () -> (nat64) query;
  get_user_archive_balance : (principal) -> (opt ArchiveBalance) query;
  redeem : () -> (Result);
  stake_ALEX : (nat64) -> (Result);
  swap : (nat64) -> (Result);
  un_stake_all_ALEX : () -> (Result);
}
