type Result = variant { Ok : text; Err : text };
type Result2 = variant { Ok : nat64; Err : text };

type Principal = principal;

type Tokens = record { e8s : nat64 };
type Stake = record {
    amount: nat64;
    time: nat64;
    reward_icp:nat64;
};

service : {
  swap : (nat64) -> (Result);
  burn_LBRY : (nat64) -> (Result);
  stake_ALEX:(nat64)->(Result);
  un_stake_all_ALEX:()->(Result);
  un_stake_ALEX:(nat64)->(Result);
  distribute_reward:()->(Result);
  claim_icp_reward:()->(Result);
  transfer_from_user_wallet:(nat64,text)->(Result);

  get_all_stakes: () -> (vec record { principal; Stake }) query;
  get_stake : (user : Principal) -> (opt Stake) query;
  get_total_staked:()->(nat64) query;
  caller_subaccount:()->(text) query;
  get_current_staking_reward_percentage : () -> (text) query;
  get_total_unclaimed_icp_reward:()->(nat64) query;
  get_total_icp_avialable:()->(nat64) query;
  get_maximum_LBRY_burn_allowed:()->(Result2) query;
  get_current_LBRY_ratio:()->(nat64) query;
}



