type Account = record { owner : principal; subaccount : opt blob };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : vec opt text; Err : text };
type Result_10 = variant { Ok : record { opt nat; opt nat }; Err : text };
type Result_2 = variant { Ok : vec opt vec record { text; Value }; Err : text };
type Result_3 = variant { Ok : vec record { nat; TokenBalances }; Err : text };
type Result_4 = variant { Ok : vec TokenBalances; Err : text };
type Result_5 = variant { Ok : vec nat; Err : text };
type Result_6 = variant { Ok : vec record { nat; opt text }; Err : text };
type Result_7 = variant { Ok : vec bool; Err : text };
type Result_8 = variant { Ok : vec opt Account; Err : text };
type Result_9 = variant { Ok : nat; Err : text };
type TokenBalances = record { alex : nat; lbry : nat };
type Value = variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : vec Value;
};
service : () -> {
  arweave_id_to_nat : (text) -> (nat) query;
  coordinate_mint : (text, opt principal) -> (Result);
  deduct_marketplace_fee : (principal) -> (Result);
  get_manifest_ids : (vec nat) -> (Result_1);
  get_metadata : (vec nat) -> (Result_2);
  get_my_nft_balances : (opt nat) -> (Result_3);
  get_nft_balances : (vec nat) -> (Result_4);
  get_nfts : (opt nat, opt nat) -> (Result_5);
  get_nfts_of : (principal) -> (Result_6);
  is_arweave_id : (text) -> (bool) query;
  nat_to_arweave_id : (nat) -> (text) query;
  nfts_exist : (vec nat) -> (Result_7);
  og_to_scion_id : (nat, principal) -> (nat) query;
  owner_of : (vec nat) -> (Result_8);
  principal_to_account : (principal) -> (text) query;
  principal_to_subaccount : (principal) -> (blob) query;
  scion_to_og_id : (nat) -> (nat) query;
  subaccount_to_principal : (blob) -> (opt principal) query;
  to_nft_subaccount : (nat) -> (blob) query;
  total_supply : () -> (Result_9);
  withdraw : (nat, opt text) -> (Result_10);
  withdraw_topup : () -> (Result);
}
