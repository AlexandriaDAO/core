/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SwapTransactionImport } from './routes/swap/transaction'
import { Route as AuthAppImporiumNftsImport } from './routes/_auth/app/imporium/nfts'
import { Route as AuthAppImporiumListingsImport } from './routes/_auth/app/imporium/listings'

// Create Virtual Routes

const ManagerLazyImport = createFileRoute('/manager')()
const InfoRouteLazyImport = createFileRoute('/info')()
const AuthRouteLazyImport = createFileRoute('/_auth')()
const IndexLazyImport = createFileRoute('/')()
const SwapIndexLazyImport = createFileRoute('/swap/')()
const InfoIndexLazyImport = createFileRoute('/info/')()
const SwapTopupLazyImport = createFileRoute('/swap/topup')()
const SwapSwapLazyImport = createFileRoute('/swap/swap')()
const SwapStakeLazyImport = createFileRoute('/swap/stake')()
const SwapSendLazyImport = createFileRoute('/swap/send')()
const SwapRedeemLazyImport = createFileRoute('/swap/redeem')()
const SwapReceiveLazyImport = createFileRoute('/swap/receive')()
const SwapInsightsLazyImport = createFileRoute('/swap/insights')()
const SwapHistoryLazyImport = createFileRoute('/swap/history')()
const SwapBurnLazyImport = createFileRoute('/swap/burn')()
const SwapBalanceLazyImport = createFileRoute('/swap/balance')()
const NftTokenIdLazyImport = createFileRoute('/nft/$tokenId')()
const InfoWhitepaperLazyImport = createFileRoute('/info/whitepaper')()
const InfoFaqLazyImport = createFileRoute('/info/faq')()
const InfoAuditLazyImport = createFileRoute('/info/audit')()
const AppSyllogosLazyImport = createFileRoute('/app/syllogos')()
const AppPermasearchLazyImport = createFileRoute('/app/permasearch')()
const AppEmporiumLazyImport = createFileRoute('/app/emporium')()
const AppDialecticaLazyImport = createFileRoute('/app/dialectica')()
const AppBibliothecaLazyImport = createFileRoute('/app/bibliotheca')()
const AppAlexandrianLazyImport = createFileRoute('/app/alexandrian')()
const AuthDashboardRouteLazyImport = createFileRoute('/_auth/dashboard')()
const AppPerpetuaIndexLazyImport = createFileRoute('/app/perpetua/')()
const AuthDashboardSettingsLazyImport = createFileRoute(
  '/_auth/dashboard/settings',
)()
const AuthDashboardProfileLazyImport = createFileRoute(
  '/_auth/dashboard/profile',
)()
const AuthDashboardIcpAssetsLazyImport = createFileRoute(
  '/_auth/dashboard/icp-assets',
)()
const AuthDashboardArweaveAssetsLazyImport = createFileRoute(
  '/_auth/dashboard/arweave-assets',
)()
const AuthAppPinaxLazyImport = createFileRoute('/_auth/app/pinax')()
const AuthDashboardLibrarianRouteLazyImport = createFileRoute(
  '/_auth/dashboard/_librarian',
)()
const AuthDashboardLibrarianIndexLazyImport = createFileRoute(
  '/_auth/dashboard/_librarian/',
)()
const AuthAppImporiumIndexLazyImport = createFileRoute('/_auth/app/imporium/')()
const AppPerpetuaShelfShelfIdLazyImport = createFileRoute(
  '/app/perpetua/shelf/$shelfId',
)()
const AppPerpetuaItemItemIdLazyImport = createFileRoute(
  '/app/perpetua/item/$itemId',
)()
const AuthDashboardProfileUpgradeLazyImport = createFileRoute(
  '/_auth/dashboard/profile/upgrade',
)()
const AuthDashboardLibrarianWalletsLazyImport = createFileRoute(
  '/_auth/dashboard/_librarian/wallets',
)()
const AuthAppImporiumMyLogsLazyImport = createFileRoute(
  '/_auth/app/imporium/my-logs',
)()
const AuthAppImporiumMarketplaceLazyImport = createFileRoute(
  '/_auth/app/imporium/marketplace',
)()
const AuthAppImporiumMarketLogsLazyImport = createFileRoute(
  '/_auth/app/imporium/market-logs',
)()
const AppPerpetuaUserUserIdIndexLazyImport = createFileRoute(
  '/app/perpetua/user/$userId/',
)()
const AppPerpetuaUserUserIdShelfShelfIdLazyImport = createFileRoute(
  '/app/perpetua/user/$userId/shelf/$shelfId',
)()
const AppPerpetuaUserUserIdItemItemIdLazyImport = createFileRoute(
  '/app/perpetua/user/$userId/item/$itemId',
)()

// Create/Update Routes

const ManagerLazyRoute = ManagerLazyImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/manager.lazy').then((d) => d.Route))

const InfoRouteLazyRoute = InfoRouteLazyImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/info/route.lazy').then((d) => d.Route))

const AuthRouteLazyRoute = AuthRouteLazyImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_auth/route.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SwapIndexLazyRoute = SwapIndexLazyImport.update({
  id: '/swap/',
  path: '/swap/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/index.lazy').then((d) => d.Route))

const InfoIndexLazyRoute = InfoIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => InfoRouteLazyRoute,
} as any).lazy(() => import('./routes/info/index.lazy').then((d) => d.Route))

const SwapTopupLazyRoute = SwapTopupLazyImport.update({
  id: '/swap/topup',
  path: '/swap/topup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/topup.lazy').then((d) => d.Route))

const SwapSwapLazyRoute = SwapSwapLazyImport.update({
  id: '/swap/swap',
  path: '/swap/swap',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/swap.lazy').then((d) => d.Route))

const SwapStakeLazyRoute = SwapStakeLazyImport.update({
  id: '/swap/stake',
  path: '/swap/stake',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/stake.lazy').then((d) => d.Route))

const SwapSendLazyRoute = SwapSendLazyImport.update({
  id: '/swap/send',
  path: '/swap/send',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/send.lazy').then((d) => d.Route))

const SwapRedeemLazyRoute = SwapRedeemLazyImport.update({
  id: '/swap/redeem',
  path: '/swap/redeem',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/redeem.lazy').then((d) => d.Route))

const SwapReceiveLazyRoute = SwapReceiveLazyImport.update({
  id: '/swap/receive',
  path: '/swap/receive',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/receive.lazy').then((d) => d.Route))

const SwapInsightsLazyRoute = SwapInsightsLazyImport.update({
  id: '/swap/insights',
  path: '/swap/insights',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/insights.lazy').then((d) => d.Route))

const SwapHistoryLazyRoute = SwapHistoryLazyImport.update({
  id: '/swap/history',
  path: '/swap/history',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/history.lazy').then((d) => d.Route))

const SwapBurnLazyRoute = SwapBurnLazyImport.update({
  id: '/swap/burn',
  path: '/swap/burn',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/burn.lazy').then((d) => d.Route))

const SwapBalanceLazyRoute = SwapBalanceLazyImport.update({
  id: '/swap/balance',
  path: '/swap/balance',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/swap/balance.lazy').then((d) => d.Route))

const NftTokenIdLazyRoute = NftTokenIdLazyImport.update({
  id: '/nft/$tokenId',
  path: '/nft/$tokenId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/nft.$tokenId.lazy').then((d) => d.Route))

const InfoWhitepaperLazyRoute = InfoWhitepaperLazyImport.update({
  id: '/whitepaper',
  path: '/whitepaper',
  getParentRoute: () => InfoRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/info/whitepaper.lazy').then((d) => d.Route),
)

const InfoFaqLazyRoute = InfoFaqLazyImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => InfoRouteLazyRoute,
} as any).lazy(() => import('./routes/info/faq.lazy').then((d) => d.Route))

const InfoAuditLazyRoute = InfoAuditLazyImport.update({
  id: '/audit',
  path: '/audit',
  getParentRoute: () => InfoRouteLazyRoute,
} as any).lazy(() => import('./routes/info/audit.lazy').then((d) => d.Route))

const AppSyllogosLazyRoute = AppSyllogosLazyImport.update({
  id: '/app/syllogos',
  path: '/app/syllogos',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/app/syllogos.lazy').then((d) => d.Route))

const AppPermasearchLazyRoute = AppPermasearchLazyImport.update({
  id: '/app/permasearch',
  path: '/app/permasearch',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/app/permasearch.lazy').then((d) => d.Route),
)

const AppEmporiumLazyRoute = AppEmporiumLazyImport.update({
  id: '/app/emporium',
  path: '/app/emporium',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/app/emporium.lazy').then((d) => d.Route))

const AppDialecticaLazyRoute = AppDialecticaLazyImport.update({
  id: '/app/dialectica',
  path: '/app/dialectica',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/app/dialectica.lazy').then((d) => d.Route),
)

const AppBibliothecaLazyRoute = AppBibliothecaLazyImport.update({
  id: '/app/bibliotheca',
  path: '/app/bibliotheca',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/app/bibliotheca.lazy').then((d) => d.Route),
)

const AppAlexandrianLazyRoute = AppAlexandrianLazyImport.update({
  id: '/app/alexandrian',
  path: '/app/alexandrian',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/app/alexandrian.lazy').then((d) => d.Route),
)

const AuthDashboardRouteLazyRoute = AuthDashboardRouteLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/dashboard/route.lazy').then((d) => d.Route),
)

const SwapTransactionRoute = SwapTransactionImport.update({
  id: '/swap/transaction',
  path: '/swap/transaction',
  getParentRoute: () => rootRoute,
} as any)

const AppPerpetuaIndexLazyRoute = AppPerpetuaIndexLazyImport.update({
  id: '/app/perpetua/',
  path: '/app/perpetua/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/app/perpetua/index.lazy').then((d) => d.Route),
)

const AuthDashboardSettingsLazyRoute = AuthDashboardSettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthDashboardRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/dashboard/settings.lazy').then((d) => d.Route),
)

const AuthDashboardProfileLazyRoute = AuthDashboardProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthDashboardRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/dashboard/profile.lazy').then((d) => d.Route),
)

const AuthDashboardIcpAssetsLazyRoute = AuthDashboardIcpAssetsLazyImport.update(
  {
    id: '/icp-assets',
    path: '/icp-assets',
    getParentRoute: () => AuthDashboardRouteLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/_auth/dashboard/icp-assets.lazy').then((d) => d.Route),
)

const AuthDashboardArweaveAssetsLazyRoute =
  AuthDashboardArweaveAssetsLazyImport.update({
    id: '/arweave-assets',
    path: '/arweave-assets',
    getParentRoute: () => AuthDashboardRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/dashboard/arweave-assets.lazy').then((d) => d.Route),
  )

const AuthAppPinaxLazyRoute = AuthAppPinaxLazyImport.update({
  id: '/app/pinax',
  path: '/app/pinax',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/app/pinax.lazy').then((d) => d.Route),
)

const AuthDashboardLibrarianRouteLazyRoute =
  AuthDashboardLibrarianRouteLazyImport.update({
    id: '/_librarian',
    getParentRoute: () => AuthDashboardRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/dashboard/_librarian/route.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthDashboardLibrarianIndexLazyRoute =
  AuthDashboardLibrarianIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthDashboardLibrarianRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/dashboard/_librarian/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthAppImporiumIndexLazyRoute = AuthAppImporiumIndexLazyImport.update({
  id: '/app/imporium/',
  path: '/app/imporium/',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/app/imporium/index.lazy').then((d) => d.Route),
)

const AppPerpetuaShelfShelfIdLazyRoute =
  AppPerpetuaShelfShelfIdLazyImport.update({
    id: '/app/perpetua/shelf/$shelfId',
    path: '/app/perpetua/shelf/$shelfId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/app/perpetua/shelf.$shelfId.lazy').then((d) => d.Route),
  )

const AppPerpetuaItemItemIdLazyRoute = AppPerpetuaItemItemIdLazyImport.update({
  id: '/app/perpetua/item/$itemId',
  path: '/app/perpetua/item/$itemId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/app/perpetua/item.$itemId.lazy').then((d) => d.Route),
)

const AuthDashboardProfileUpgradeLazyRoute =
  AuthDashboardProfileUpgradeLazyImport.update({
    id: '/upgrade',
    path: '/upgrade',
    getParentRoute: () => AuthDashboardProfileLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/dashboard/profile.upgrade.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthDashboardLibrarianWalletsLazyRoute =
  AuthDashboardLibrarianWalletsLazyImport.update({
    id: '/wallets',
    path: '/wallets',
    getParentRoute: () => AuthDashboardLibrarianRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/dashboard/_librarian/wallets.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthAppImporiumMyLogsLazyRoute = AuthAppImporiumMyLogsLazyImport.update({
  id: '/app/imporium/my-logs',
  path: '/app/imporium/my-logs',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/app/imporium/my-logs.lazy').then((d) => d.Route),
)

const AuthAppImporiumMarketplaceLazyRoute =
  AuthAppImporiumMarketplaceLazyImport.update({
    id: '/app/imporium/marketplace',
    path: '/app/imporium/marketplace',
    getParentRoute: () => AuthRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/app/imporium/marketplace.lazy').then((d) => d.Route),
  )

const AuthAppImporiumMarketLogsLazyRoute =
  AuthAppImporiumMarketLogsLazyImport.update({
    id: '/app/imporium/market-logs',
    path: '/app/imporium/market-logs',
    getParentRoute: () => AuthRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_auth/app/imporium/market-logs.lazy').then((d) => d.Route),
  )

const AuthAppImporiumNftsRoute = AuthAppImporiumNftsImport.update({
  id: '/app/imporium/nfts',
  path: '/app/imporium/nfts',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth/app/imporium/nfts.lazy').then((d) => d.Route),
)

const AuthAppImporiumListingsRoute = AuthAppImporiumListingsImport.update({
  id: '/app/imporium/listings',
  path: '/app/imporium/listings',
  getParentRoute: () => AuthRouteLazyRoute,
} as any)

const AppPerpetuaUserUserIdIndexLazyRoute =
  AppPerpetuaUserUserIdIndexLazyImport.update({
    id: '/app/perpetua/user/$userId/',
    path: '/app/perpetua/user/$userId/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/app/perpetua/user/$userId/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AppPerpetuaUserUserIdShelfShelfIdLazyRoute =
  AppPerpetuaUserUserIdShelfShelfIdLazyImport.update({
    id: '/app/perpetua/user/$userId/shelf/$shelfId',
    path: '/app/perpetua/user/$userId/shelf/$shelfId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/app/perpetua/user/$userId/shelf.$shelfId.lazy').then(
      (d) => d.Route,
    ),
  )

const AppPerpetuaUserUserIdItemItemIdLazyRoute =
  AppPerpetuaUserUserIdItemItemIdLazyImport.update({
    id: '/app/perpetua/user/$userId/item/$itemId',
    path: '/app/perpetua/user/$userId/item/$itemId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/app/perpetua/user/$userId/item.$itemId.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/info': {
      id: '/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/transaction': {
      id: '/swap/transaction'
      path: '/swap/transaction'
      fullPath: '/swap/transaction'
      preLoaderRoute: typeof SwapTransactionImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/app/alexandrian': {
      id: '/app/alexandrian'
      path: '/app/alexandrian'
      fullPath: '/app/alexandrian'
      preLoaderRoute: typeof AppAlexandrianLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/bibliotheca': {
      id: '/app/bibliotheca'
      path: '/app/bibliotheca'
      fullPath: '/app/bibliotheca'
      preLoaderRoute: typeof AppBibliothecaLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/dialectica': {
      id: '/app/dialectica'
      path: '/app/dialectica'
      fullPath: '/app/dialectica'
      preLoaderRoute: typeof AppDialecticaLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/emporium': {
      id: '/app/emporium'
      path: '/app/emporium'
      fullPath: '/app/emporium'
      preLoaderRoute: typeof AppEmporiumLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/permasearch': {
      id: '/app/permasearch'
      path: '/app/permasearch'
      fullPath: '/app/permasearch'
      preLoaderRoute: typeof AppPermasearchLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/syllogos': {
      id: '/app/syllogos'
      path: '/app/syllogos'
      fullPath: '/app/syllogos'
      preLoaderRoute: typeof AppSyllogosLazyImport
      parentRoute: typeof rootRoute
    }
    '/info/audit': {
      id: '/info/audit'
      path: '/audit'
      fullPath: '/info/audit'
      preLoaderRoute: typeof InfoAuditLazyImport
      parentRoute: typeof InfoRouteLazyImport
    }
    '/info/faq': {
      id: '/info/faq'
      path: '/faq'
      fullPath: '/info/faq'
      preLoaderRoute: typeof InfoFaqLazyImport
      parentRoute: typeof InfoRouteLazyImport
    }
    '/info/whitepaper': {
      id: '/info/whitepaper'
      path: '/whitepaper'
      fullPath: '/info/whitepaper'
      preLoaderRoute: typeof InfoWhitepaperLazyImport
      parentRoute: typeof InfoRouteLazyImport
    }
    '/nft/$tokenId': {
      id: '/nft/$tokenId'
      path: '/nft/$tokenId'
      fullPath: '/nft/$tokenId'
      preLoaderRoute: typeof NftTokenIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/balance': {
      id: '/swap/balance'
      path: '/swap/balance'
      fullPath: '/swap/balance'
      preLoaderRoute: typeof SwapBalanceLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/burn': {
      id: '/swap/burn'
      path: '/swap/burn'
      fullPath: '/swap/burn'
      preLoaderRoute: typeof SwapBurnLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/history': {
      id: '/swap/history'
      path: '/swap/history'
      fullPath: '/swap/history'
      preLoaderRoute: typeof SwapHistoryLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/insights': {
      id: '/swap/insights'
      path: '/swap/insights'
      fullPath: '/swap/insights'
      preLoaderRoute: typeof SwapInsightsLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/receive': {
      id: '/swap/receive'
      path: '/swap/receive'
      fullPath: '/swap/receive'
      preLoaderRoute: typeof SwapReceiveLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/redeem': {
      id: '/swap/redeem'
      path: '/swap/redeem'
      fullPath: '/swap/redeem'
      preLoaderRoute: typeof SwapRedeemLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/send': {
      id: '/swap/send'
      path: '/swap/send'
      fullPath: '/swap/send'
      preLoaderRoute: typeof SwapSendLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/stake': {
      id: '/swap/stake'
      path: '/swap/stake'
      fullPath: '/swap/stake'
      preLoaderRoute: typeof SwapStakeLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/swap': {
      id: '/swap/swap'
      path: '/swap/swap'
      fullPath: '/swap/swap'
      preLoaderRoute: typeof SwapSwapLazyImport
      parentRoute: typeof rootRoute
    }
    '/swap/topup': {
      id: '/swap/topup'
      path: '/swap/topup'
      fullPath: '/swap/topup'
      preLoaderRoute: typeof SwapTopupLazyImport
      parentRoute: typeof rootRoute
    }
    '/info/': {
      id: '/info/'
      path: '/'
      fullPath: '/info/'
      preLoaderRoute: typeof InfoIndexLazyImport
      parentRoute: typeof InfoRouteLazyImport
    }
    '/swap/': {
      id: '/swap/'
      path: '/swap'
      fullPath: '/swap'
      preLoaderRoute: typeof SwapIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard/_librarian': {
      id: '/_auth/dashboard/_librarian'
      path: ''
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardLibrarianRouteLazyImport
      parentRoute: typeof AuthDashboardRouteLazyImport
    }
    '/_auth/app/pinax': {
      id: '/_auth/app/pinax'
      path: '/app/pinax'
      fullPath: '/app/pinax'
      preLoaderRoute: typeof AuthAppPinaxLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/dashboard/arweave-assets': {
      id: '/_auth/dashboard/arweave-assets'
      path: '/arweave-assets'
      fullPath: '/dashboard/arweave-assets'
      preLoaderRoute: typeof AuthDashboardArweaveAssetsLazyImport
      parentRoute: typeof AuthDashboardRouteLazyImport
    }
    '/_auth/dashboard/icp-assets': {
      id: '/_auth/dashboard/icp-assets'
      path: '/icp-assets'
      fullPath: '/dashboard/icp-assets'
      preLoaderRoute: typeof AuthDashboardIcpAssetsLazyImport
      parentRoute: typeof AuthDashboardRouteLazyImport
    }
    '/_auth/dashboard/profile': {
      id: '/_auth/dashboard/profile'
      path: '/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof AuthDashboardProfileLazyImport
      parentRoute: typeof AuthDashboardRouteLazyImport
    }
    '/_auth/dashboard/settings': {
      id: '/_auth/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof AuthDashboardSettingsLazyImport
      parentRoute: typeof AuthDashboardRouteLazyImport
    }
    '/app/perpetua/': {
      id: '/app/perpetua/'
      path: '/app/perpetua'
      fullPath: '/app/perpetua'
      preLoaderRoute: typeof AppPerpetuaIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/app/imporium/listings': {
      id: '/_auth/app/imporium/listings'
      path: '/app/imporium/listings'
      fullPath: '/app/imporium/listings'
      preLoaderRoute: typeof AuthAppImporiumListingsImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/app/imporium/nfts': {
      id: '/_auth/app/imporium/nfts'
      path: '/app/imporium/nfts'
      fullPath: '/app/imporium/nfts'
      preLoaderRoute: typeof AuthAppImporiumNftsImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/app/imporium/market-logs': {
      id: '/_auth/app/imporium/market-logs'
      path: '/app/imporium/market-logs'
      fullPath: '/app/imporium/market-logs'
      preLoaderRoute: typeof AuthAppImporiumMarketLogsLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/app/imporium/marketplace': {
      id: '/_auth/app/imporium/marketplace'
      path: '/app/imporium/marketplace'
      fullPath: '/app/imporium/marketplace'
      preLoaderRoute: typeof AuthAppImporiumMarketplaceLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/app/imporium/my-logs': {
      id: '/_auth/app/imporium/my-logs'
      path: '/app/imporium/my-logs'
      fullPath: '/app/imporium/my-logs'
      preLoaderRoute: typeof AuthAppImporiumMyLogsLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/dashboard/_librarian/wallets': {
      id: '/_auth/dashboard/_librarian/wallets'
      path: '/wallets'
      fullPath: '/dashboard/wallets'
      preLoaderRoute: typeof AuthDashboardLibrarianWalletsLazyImport
      parentRoute: typeof AuthDashboardLibrarianRouteLazyImport
    }
    '/_auth/dashboard/profile/upgrade': {
      id: '/_auth/dashboard/profile/upgrade'
      path: '/upgrade'
      fullPath: '/dashboard/profile/upgrade'
      preLoaderRoute: typeof AuthDashboardProfileUpgradeLazyImport
      parentRoute: typeof AuthDashboardProfileLazyImport
    }
    '/app/perpetua/item/$itemId': {
      id: '/app/perpetua/item/$itemId'
      path: '/app/perpetua/item/$itemId'
      fullPath: '/app/perpetua/item/$itemId'
      preLoaderRoute: typeof AppPerpetuaItemItemIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/perpetua/shelf/$shelfId': {
      id: '/app/perpetua/shelf/$shelfId'
      path: '/app/perpetua/shelf/$shelfId'
      fullPath: '/app/perpetua/shelf/$shelfId'
      preLoaderRoute: typeof AppPerpetuaShelfShelfIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/app/imporium/': {
      id: '/_auth/app/imporium/'
      path: '/app/imporium'
      fullPath: '/app/imporium'
      preLoaderRoute: typeof AuthAppImporiumIndexLazyImport
      parentRoute: typeof AuthRouteLazyImport
    }
    '/_auth/dashboard/_librarian/': {
      id: '/_auth/dashboard/_librarian/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthDashboardLibrarianIndexLazyImport
      parentRoute: typeof AuthDashboardLibrarianRouteLazyImport
    }
    '/app/perpetua/user/$userId/': {
      id: '/app/perpetua/user/$userId/'
      path: '/app/perpetua/user/$userId'
      fullPath: '/app/perpetua/user/$userId'
      preLoaderRoute: typeof AppPerpetuaUserUserIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/perpetua/user/$userId/item/$itemId': {
      id: '/app/perpetua/user/$userId/item/$itemId'
      path: '/app/perpetua/user/$userId/item/$itemId'
      fullPath: '/app/perpetua/user/$userId/item/$itemId'
      preLoaderRoute: typeof AppPerpetuaUserUserIdItemItemIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/perpetua/user/$userId/shelf/$shelfId': {
      id: '/app/perpetua/user/$userId/shelf/$shelfId'
      path: '/app/perpetua/user/$userId/shelf/$shelfId'
      fullPath: '/app/perpetua/user/$userId/shelf/$shelfId'
      preLoaderRoute: typeof AppPerpetuaUserUserIdShelfShelfIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthDashboardLibrarianRouteLazyRouteChildren {
  AuthDashboardLibrarianWalletsLazyRoute: typeof AuthDashboardLibrarianWalletsLazyRoute
  AuthDashboardLibrarianIndexLazyRoute: typeof AuthDashboardLibrarianIndexLazyRoute
}

const AuthDashboardLibrarianRouteLazyRouteChildren: AuthDashboardLibrarianRouteLazyRouteChildren =
  {
    AuthDashboardLibrarianWalletsLazyRoute:
      AuthDashboardLibrarianWalletsLazyRoute,
    AuthDashboardLibrarianIndexLazyRoute: AuthDashboardLibrarianIndexLazyRoute,
  }

const AuthDashboardLibrarianRouteLazyRouteWithChildren =
  AuthDashboardLibrarianRouteLazyRoute._addFileChildren(
    AuthDashboardLibrarianRouteLazyRouteChildren,
  )

interface AuthDashboardProfileLazyRouteChildren {
  AuthDashboardProfileUpgradeLazyRoute: typeof AuthDashboardProfileUpgradeLazyRoute
}

const AuthDashboardProfileLazyRouteChildren: AuthDashboardProfileLazyRouteChildren =
  {
    AuthDashboardProfileUpgradeLazyRoute: AuthDashboardProfileUpgradeLazyRoute,
  }

const AuthDashboardProfileLazyRouteWithChildren =
  AuthDashboardProfileLazyRoute._addFileChildren(
    AuthDashboardProfileLazyRouteChildren,
  )

interface AuthDashboardRouteLazyRouteChildren {
  AuthDashboardLibrarianRouteLazyRoute: typeof AuthDashboardLibrarianRouteLazyRouteWithChildren
  AuthDashboardArweaveAssetsLazyRoute: typeof AuthDashboardArweaveAssetsLazyRoute
  AuthDashboardIcpAssetsLazyRoute: typeof AuthDashboardIcpAssetsLazyRoute
  AuthDashboardProfileLazyRoute: typeof AuthDashboardProfileLazyRouteWithChildren
  AuthDashboardSettingsLazyRoute: typeof AuthDashboardSettingsLazyRoute
}

const AuthDashboardRouteLazyRouteChildren: AuthDashboardRouteLazyRouteChildren =
  {
    AuthDashboardLibrarianRouteLazyRoute:
      AuthDashboardLibrarianRouteLazyRouteWithChildren,
    AuthDashboardArweaveAssetsLazyRoute: AuthDashboardArweaveAssetsLazyRoute,
    AuthDashboardIcpAssetsLazyRoute: AuthDashboardIcpAssetsLazyRoute,
    AuthDashboardProfileLazyRoute: AuthDashboardProfileLazyRouteWithChildren,
    AuthDashboardSettingsLazyRoute: AuthDashboardSettingsLazyRoute,
  }

const AuthDashboardRouteLazyRouteWithChildren =
  AuthDashboardRouteLazyRoute._addFileChildren(
    AuthDashboardRouteLazyRouteChildren,
  )

interface AuthRouteLazyRouteChildren {
  AuthDashboardRouteLazyRoute: typeof AuthDashboardRouteLazyRouteWithChildren
  AuthAppPinaxLazyRoute: typeof AuthAppPinaxLazyRoute
  AuthAppImporiumListingsRoute: typeof AuthAppImporiumListingsRoute
  AuthAppImporiumNftsRoute: typeof AuthAppImporiumNftsRoute
  AuthAppImporiumMarketLogsLazyRoute: typeof AuthAppImporiumMarketLogsLazyRoute
  AuthAppImporiumMarketplaceLazyRoute: typeof AuthAppImporiumMarketplaceLazyRoute
  AuthAppImporiumMyLogsLazyRoute: typeof AuthAppImporiumMyLogsLazyRoute
  AuthAppImporiumIndexLazyRoute: typeof AuthAppImporiumIndexLazyRoute
}

const AuthRouteLazyRouteChildren: AuthRouteLazyRouteChildren = {
  AuthDashboardRouteLazyRoute: AuthDashboardRouteLazyRouteWithChildren,
  AuthAppPinaxLazyRoute: AuthAppPinaxLazyRoute,
  AuthAppImporiumListingsRoute: AuthAppImporiumListingsRoute,
  AuthAppImporiumNftsRoute: AuthAppImporiumNftsRoute,
  AuthAppImporiumMarketLogsLazyRoute: AuthAppImporiumMarketLogsLazyRoute,
  AuthAppImporiumMarketplaceLazyRoute: AuthAppImporiumMarketplaceLazyRoute,
  AuthAppImporiumMyLogsLazyRoute: AuthAppImporiumMyLogsLazyRoute,
  AuthAppImporiumIndexLazyRoute: AuthAppImporiumIndexLazyRoute,
}

const AuthRouteLazyRouteWithChildren = AuthRouteLazyRoute._addFileChildren(
  AuthRouteLazyRouteChildren,
)

interface InfoRouteLazyRouteChildren {
  InfoAuditLazyRoute: typeof InfoAuditLazyRoute
  InfoFaqLazyRoute: typeof InfoFaqLazyRoute
  InfoWhitepaperLazyRoute: typeof InfoWhitepaperLazyRoute
  InfoIndexLazyRoute: typeof InfoIndexLazyRoute
}

const InfoRouteLazyRouteChildren: InfoRouteLazyRouteChildren = {
  InfoAuditLazyRoute: InfoAuditLazyRoute,
  InfoFaqLazyRoute: InfoFaqLazyRoute,
  InfoWhitepaperLazyRoute: InfoWhitepaperLazyRoute,
  InfoIndexLazyRoute: InfoIndexLazyRoute,
}

const InfoRouteLazyRouteWithChildren = InfoRouteLazyRoute._addFileChildren(
  InfoRouteLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof AuthRouteLazyRouteWithChildren
  '/info': typeof InfoRouteLazyRouteWithChildren
  '/manager': typeof ManagerLazyRoute
  '/swap/transaction': typeof SwapTransactionRoute
  '/dashboard': typeof AuthDashboardLibrarianRouteLazyRouteWithChildren
  '/app/alexandrian': typeof AppAlexandrianLazyRoute
  '/app/bibliotheca': typeof AppBibliothecaLazyRoute
  '/app/dialectica': typeof AppDialecticaLazyRoute
  '/app/emporium': typeof AppEmporiumLazyRoute
  '/app/permasearch': typeof AppPermasearchLazyRoute
  '/app/syllogos': typeof AppSyllogosLazyRoute
  '/info/audit': typeof InfoAuditLazyRoute
  '/info/faq': typeof InfoFaqLazyRoute
  '/info/whitepaper': typeof InfoWhitepaperLazyRoute
  '/nft/$tokenId': typeof NftTokenIdLazyRoute
  '/swap/balance': typeof SwapBalanceLazyRoute
  '/swap/burn': typeof SwapBurnLazyRoute
  '/swap/history': typeof SwapHistoryLazyRoute
  '/swap/insights': typeof SwapInsightsLazyRoute
  '/swap/receive': typeof SwapReceiveLazyRoute
  '/swap/redeem': typeof SwapRedeemLazyRoute
  '/swap/send': typeof SwapSendLazyRoute
  '/swap/stake': typeof SwapStakeLazyRoute
  '/swap/swap': typeof SwapSwapLazyRoute
  '/swap/topup': typeof SwapTopupLazyRoute
  '/info/': typeof InfoIndexLazyRoute
  '/swap': typeof SwapIndexLazyRoute
  '/app/pinax': typeof AuthAppPinaxLazyRoute
  '/dashboard/arweave-assets': typeof AuthDashboardArweaveAssetsLazyRoute
  '/dashboard/icp-assets': typeof AuthDashboardIcpAssetsLazyRoute
  '/dashboard/profile': typeof AuthDashboardProfileLazyRouteWithChildren
  '/dashboard/settings': typeof AuthDashboardSettingsLazyRoute
  '/app/perpetua': typeof AppPerpetuaIndexLazyRoute
  '/app/imporium/listings': typeof AuthAppImporiumListingsRoute
  '/app/imporium/nfts': typeof AuthAppImporiumNftsRoute
  '/app/imporium/market-logs': typeof AuthAppImporiumMarketLogsLazyRoute
  '/app/imporium/marketplace': typeof AuthAppImporiumMarketplaceLazyRoute
  '/app/imporium/my-logs': typeof AuthAppImporiumMyLogsLazyRoute
  '/dashboard/wallets': typeof AuthDashboardLibrarianWalletsLazyRoute
  '/dashboard/profile/upgrade': typeof AuthDashboardProfileUpgradeLazyRoute
  '/app/perpetua/item/$itemId': typeof AppPerpetuaItemItemIdLazyRoute
  '/app/perpetua/shelf/$shelfId': typeof AppPerpetuaShelfShelfIdLazyRoute
  '/app/imporium': typeof AuthAppImporiumIndexLazyRoute
  '/dashboard/': typeof AuthDashboardLibrarianIndexLazyRoute
  '/app/perpetua/user/$userId': typeof AppPerpetuaUserUserIdIndexLazyRoute
  '/app/perpetua/user/$userId/item/$itemId': typeof AppPerpetuaUserUserIdItemItemIdLazyRoute
  '/app/perpetua/user/$userId/shelf/$shelfId': typeof AppPerpetuaUserUserIdShelfShelfIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof AuthRouteLazyRouteWithChildren
  '/manager': typeof ManagerLazyRoute
  '/swap/transaction': typeof SwapTransactionRoute
  '/dashboard': typeof AuthDashboardLibrarianIndexLazyRoute
  '/app/alexandrian': typeof AppAlexandrianLazyRoute
  '/app/bibliotheca': typeof AppBibliothecaLazyRoute
  '/app/dialectica': typeof AppDialecticaLazyRoute
  '/app/emporium': typeof AppEmporiumLazyRoute
  '/app/permasearch': typeof AppPermasearchLazyRoute
  '/app/syllogos': typeof AppSyllogosLazyRoute
  '/info/audit': typeof InfoAuditLazyRoute
  '/info/faq': typeof InfoFaqLazyRoute
  '/info/whitepaper': typeof InfoWhitepaperLazyRoute
  '/nft/$tokenId': typeof NftTokenIdLazyRoute
  '/swap/balance': typeof SwapBalanceLazyRoute
  '/swap/burn': typeof SwapBurnLazyRoute
  '/swap/history': typeof SwapHistoryLazyRoute
  '/swap/insights': typeof SwapInsightsLazyRoute
  '/swap/receive': typeof SwapReceiveLazyRoute
  '/swap/redeem': typeof SwapRedeemLazyRoute
  '/swap/send': typeof SwapSendLazyRoute
  '/swap/stake': typeof SwapStakeLazyRoute
  '/swap/swap': typeof SwapSwapLazyRoute
  '/swap/topup': typeof SwapTopupLazyRoute
  '/info': typeof InfoIndexLazyRoute
  '/swap': typeof SwapIndexLazyRoute
  '/app/pinax': typeof AuthAppPinaxLazyRoute
  '/dashboard/arweave-assets': typeof AuthDashboardArweaveAssetsLazyRoute
  '/dashboard/icp-assets': typeof AuthDashboardIcpAssetsLazyRoute
  '/dashboard/profile': typeof AuthDashboardProfileLazyRouteWithChildren
  '/dashboard/settings': typeof AuthDashboardSettingsLazyRoute
  '/app/perpetua': typeof AppPerpetuaIndexLazyRoute
  '/app/imporium/listings': typeof AuthAppImporiumListingsRoute
  '/app/imporium/nfts': typeof AuthAppImporiumNftsRoute
  '/app/imporium/market-logs': typeof AuthAppImporiumMarketLogsLazyRoute
  '/app/imporium/marketplace': typeof AuthAppImporiumMarketplaceLazyRoute
  '/app/imporium/my-logs': typeof AuthAppImporiumMyLogsLazyRoute
  '/dashboard/wallets': typeof AuthDashboardLibrarianWalletsLazyRoute
  '/dashboard/profile/upgrade': typeof AuthDashboardProfileUpgradeLazyRoute
  '/app/perpetua/item/$itemId': typeof AppPerpetuaItemItemIdLazyRoute
  '/app/perpetua/shelf/$shelfId': typeof AppPerpetuaShelfShelfIdLazyRoute
  '/app/imporium': typeof AuthAppImporiumIndexLazyRoute
  '/app/perpetua/user/$userId': typeof AppPerpetuaUserUserIdIndexLazyRoute
  '/app/perpetua/user/$userId/item/$itemId': typeof AppPerpetuaUserUserIdItemItemIdLazyRoute
  '/app/perpetua/user/$userId/shelf/$shelfId': typeof AppPerpetuaUserUserIdShelfShelfIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteLazyRouteWithChildren
  '/info': typeof InfoRouteLazyRouteWithChildren
  '/manager': typeof ManagerLazyRoute
  '/swap/transaction': typeof SwapTransactionRoute
  '/_auth/dashboard': typeof AuthDashboardRouteLazyRouteWithChildren
  '/app/alexandrian': typeof AppAlexandrianLazyRoute
  '/app/bibliotheca': typeof AppBibliothecaLazyRoute
  '/app/dialectica': typeof AppDialecticaLazyRoute
  '/app/emporium': typeof AppEmporiumLazyRoute
  '/app/permasearch': typeof AppPermasearchLazyRoute
  '/app/syllogos': typeof AppSyllogosLazyRoute
  '/info/audit': typeof InfoAuditLazyRoute
  '/info/faq': typeof InfoFaqLazyRoute
  '/info/whitepaper': typeof InfoWhitepaperLazyRoute
  '/nft/$tokenId': typeof NftTokenIdLazyRoute
  '/swap/balance': typeof SwapBalanceLazyRoute
  '/swap/burn': typeof SwapBurnLazyRoute
  '/swap/history': typeof SwapHistoryLazyRoute
  '/swap/insights': typeof SwapInsightsLazyRoute
  '/swap/receive': typeof SwapReceiveLazyRoute
  '/swap/redeem': typeof SwapRedeemLazyRoute
  '/swap/send': typeof SwapSendLazyRoute
  '/swap/stake': typeof SwapStakeLazyRoute
  '/swap/swap': typeof SwapSwapLazyRoute
  '/swap/topup': typeof SwapTopupLazyRoute
  '/info/': typeof InfoIndexLazyRoute
  '/swap/': typeof SwapIndexLazyRoute
  '/_auth/dashboard/_librarian': typeof AuthDashboardLibrarianRouteLazyRouteWithChildren
  '/_auth/app/pinax': typeof AuthAppPinaxLazyRoute
  '/_auth/dashboard/arweave-assets': typeof AuthDashboardArweaveAssetsLazyRoute
  '/_auth/dashboard/icp-assets': typeof AuthDashboardIcpAssetsLazyRoute
  '/_auth/dashboard/profile': typeof AuthDashboardProfileLazyRouteWithChildren
  '/_auth/dashboard/settings': typeof AuthDashboardSettingsLazyRoute
  '/app/perpetua/': typeof AppPerpetuaIndexLazyRoute
  '/_auth/app/imporium/listings': typeof AuthAppImporiumListingsRoute
  '/_auth/app/imporium/nfts': typeof AuthAppImporiumNftsRoute
  '/_auth/app/imporium/market-logs': typeof AuthAppImporiumMarketLogsLazyRoute
  '/_auth/app/imporium/marketplace': typeof AuthAppImporiumMarketplaceLazyRoute
  '/_auth/app/imporium/my-logs': typeof AuthAppImporiumMyLogsLazyRoute
  '/_auth/dashboard/_librarian/wallets': typeof AuthDashboardLibrarianWalletsLazyRoute
  '/_auth/dashboard/profile/upgrade': typeof AuthDashboardProfileUpgradeLazyRoute
  '/app/perpetua/item/$itemId': typeof AppPerpetuaItemItemIdLazyRoute
  '/app/perpetua/shelf/$shelfId': typeof AppPerpetuaShelfShelfIdLazyRoute
  '/_auth/app/imporium/': typeof AuthAppImporiumIndexLazyRoute
  '/_auth/dashboard/_librarian/': typeof AuthDashboardLibrarianIndexLazyRoute
  '/app/perpetua/user/$userId/': typeof AppPerpetuaUserUserIdIndexLazyRoute
  '/app/perpetua/user/$userId/item/$itemId': typeof AppPerpetuaUserUserIdItemItemIdLazyRoute
  '/app/perpetua/user/$userId/shelf/$shelfId': typeof AppPerpetuaUserUserIdShelfShelfIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/info'
    | '/manager'
    | '/swap/transaction'
    | '/dashboard'
    | '/app/alexandrian'
    | '/app/bibliotheca'
    | '/app/dialectica'
    | '/app/emporium'
    | '/app/permasearch'
    | '/app/syllogos'
    | '/info/audit'
    | '/info/faq'
    | '/info/whitepaper'
    | '/nft/$tokenId'
    | '/swap/balance'
    | '/swap/burn'
    | '/swap/history'
    | '/swap/insights'
    | '/swap/receive'
    | '/swap/redeem'
    | '/swap/send'
    | '/swap/stake'
    | '/swap/swap'
    | '/swap/topup'
    | '/info/'
    | '/swap'
    | '/app/pinax'
    | '/dashboard/arweave-assets'
    | '/dashboard/icp-assets'
    | '/dashboard/profile'
    | '/dashboard/settings'
    | '/app/perpetua'
    | '/app/imporium/listings'
    | '/app/imporium/nfts'
    | '/app/imporium/market-logs'
    | '/app/imporium/marketplace'
    | '/app/imporium/my-logs'
    | '/dashboard/wallets'
    | '/dashboard/profile/upgrade'
    | '/app/perpetua/item/$itemId'
    | '/app/perpetua/shelf/$shelfId'
    | '/app/imporium'
    | '/dashboard/'
    | '/app/perpetua/user/$userId'
    | '/app/perpetua/user/$userId/item/$itemId'
    | '/app/perpetua/user/$userId/shelf/$shelfId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/manager'
    | '/swap/transaction'
    | '/dashboard'
    | '/app/alexandrian'
    | '/app/bibliotheca'
    | '/app/dialectica'
    | '/app/emporium'
    | '/app/permasearch'
    | '/app/syllogos'
    | '/info/audit'
    | '/info/faq'
    | '/info/whitepaper'
    | '/nft/$tokenId'
    | '/swap/balance'
    | '/swap/burn'
    | '/swap/history'
    | '/swap/insights'
    | '/swap/receive'
    | '/swap/redeem'
    | '/swap/send'
    | '/swap/stake'
    | '/swap/swap'
    | '/swap/topup'
    | '/info'
    | '/swap'
    | '/app/pinax'
    | '/dashboard/arweave-assets'
    | '/dashboard/icp-assets'
    | '/dashboard/profile'
    | '/dashboard/settings'
    | '/app/perpetua'
    | '/app/imporium/listings'
    | '/app/imporium/nfts'
    | '/app/imporium/market-logs'
    | '/app/imporium/marketplace'
    | '/app/imporium/my-logs'
    | '/dashboard/wallets'
    | '/dashboard/profile/upgrade'
    | '/app/perpetua/item/$itemId'
    | '/app/perpetua/shelf/$shelfId'
    | '/app/imporium'
    | '/app/perpetua/user/$userId'
    | '/app/perpetua/user/$userId/item/$itemId'
    | '/app/perpetua/user/$userId/shelf/$shelfId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/info'
    | '/manager'
    | '/swap/transaction'
    | '/_auth/dashboard'
    | '/app/alexandrian'
    | '/app/bibliotheca'
    | '/app/dialectica'
    | '/app/emporium'
    | '/app/permasearch'
    | '/app/syllogos'
    | '/info/audit'
    | '/info/faq'
    | '/info/whitepaper'
    | '/nft/$tokenId'
    | '/swap/balance'
    | '/swap/burn'
    | '/swap/history'
    | '/swap/insights'
    | '/swap/receive'
    | '/swap/redeem'
    | '/swap/send'
    | '/swap/stake'
    | '/swap/swap'
    | '/swap/topup'
    | '/info/'
    | '/swap/'
    | '/_auth/dashboard/_librarian'
    | '/_auth/app/pinax'
    | '/_auth/dashboard/arweave-assets'
    | '/_auth/dashboard/icp-assets'
    | '/_auth/dashboard/profile'
    | '/_auth/dashboard/settings'
    | '/app/perpetua/'
    | '/_auth/app/imporium/listings'
    | '/_auth/app/imporium/nfts'
    | '/_auth/app/imporium/market-logs'
    | '/_auth/app/imporium/marketplace'
    | '/_auth/app/imporium/my-logs'
    | '/_auth/dashboard/_librarian/wallets'
    | '/_auth/dashboard/profile/upgrade'
    | '/app/perpetua/item/$itemId'
    | '/app/perpetua/shelf/$shelfId'
    | '/_auth/app/imporium/'
    | '/_auth/dashboard/_librarian/'
    | '/app/perpetua/user/$userId/'
    | '/app/perpetua/user/$userId/item/$itemId'
    | '/app/perpetua/user/$userId/shelf/$shelfId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRouteLazyRoute: typeof AuthRouteLazyRouteWithChildren
  InfoRouteLazyRoute: typeof InfoRouteLazyRouteWithChildren
  ManagerLazyRoute: typeof ManagerLazyRoute
  SwapTransactionRoute: typeof SwapTransactionRoute
  AppAlexandrianLazyRoute: typeof AppAlexandrianLazyRoute
  AppBibliothecaLazyRoute: typeof AppBibliothecaLazyRoute
  AppDialecticaLazyRoute: typeof AppDialecticaLazyRoute
  AppEmporiumLazyRoute: typeof AppEmporiumLazyRoute
  AppPermasearchLazyRoute: typeof AppPermasearchLazyRoute
  AppSyllogosLazyRoute: typeof AppSyllogosLazyRoute
  NftTokenIdLazyRoute: typeof NftTokenIdLazyRoute
  SwapBalanceLazyRoute: typeof SwapBalanceLazyRoute
  SwapBurnLazyRoute: typeof SwapBurnLazyRoute
  SwapHistoryLazyRoute: typeof SwapHistoryLazyRoute
  SwapInsightsLazyRoute: typeof SwapInsightsLazyRoute
  SwapReceiveLazyRoute: typeof SwapReceiveLazyRoute
  SwapRedeemLazyRoute: typeof SwapRedeemLazyRoute
  SwapSendLazyRoute: typeof SwapSendLazyRoute
  SwapStakeLazyRoute: typeof SwapStakeLazyRoute
  SwapSwapLazyRoute: typeof SwapSwapLazyRoute
  SwapTopupLazyRoute: typeof SwapTopupLazyRoute
  SwapIndexLazyRoute: typeof SwapIndexLazyRoute
  AppPerpetuaIndexLazyRoute: typeof AppPerpetuaIndexLazyRoute
  AppPerpetuaItemItemIdLazyRoute: typeof AppPerpetuaItemItemIdLazyRoute
  AppPerpetuaShelfShelfIdLazyRoute: typeof AppPerpetuaShelfShelfIdLazyRoute
  AppPerpetuaUserUserIdIndexLazyRoute: typeof AppPerpetuaUserUserIdIndexLazyRoute
  AppPerpetuaUserUserIdItemItemIdLazyRoute: typeof AppPerpetuaUserUserIdItemItemIdLazyRoute
  AppPerpetuaUserUserIdShelfShelfIdLazyRoute: typeof AppPerpetuaUserUserIdShelfShelfIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRouteLazyRoute: AuthRouteLazyRouteWithChildren,
  InfoRouteLazyRoute: InfoRouteLazyRouteWithChildren,
  ManagerLazyRoute: ManagerLazyRoute,
  SwapTransactionRoute: SwapTransactionRoute,
  AppAlexandrianLazyRoute: AppAlexandrianLazyRoute,
  AppBibliothecaLazyRoute: AppBibliothecaLazyRoute,
  AppDialecticaLazyRoute: AppDialecticaLazyRoute,
  AppEmporiumLazyRoute: AppEmporiumLazyRoute,
  AppPermasearchLazyRoute: AppPermasearchLazyRoute,
  AppSyllogosLazyRoute: AppSyllogosLazyRoute,
  NftTokenIdLazyRoute: NftTokenIdLazyRoute,
  SwapBalanceLazyRoute: SwapBalanceLazyRoute,
  SwapBurnLazyRoute: SwapBurnLazyRoute,
  SwapHistoryLazyRoute: SwapHistoryLazyRoute,
  SwapInsightsLazyRoute: SwapInsightsLazyRoute,
  SwapReceiveLazyRoute: SwapReceiveLazyRoute,
  SwapRedeemLazyRoute: SwapRedeemLazyRoute,
  SwapSendLazyRoute: SwapSendLazyRoute,
  SwapStakeLazyRoute: SwapStakeLazyRoute,
  SwapSwapLazyRoute: SwapSwapLazyRoute,
  SwapTopupLazyRoute: SwapTopupLazyRoute,
  SwapIndexLazyRoute: SwapIndexLazyRoute,
  AppPerpetuaIndexLazyRoute: AppPerpetuaIndexLazyRoute,
  AppPerpetuaItemItemIdLazyRoute: AppPerpetuaItemItemIdLazyRoute,
  AppPerpetuaShelfShelfIdLazyRoute: AppPerpetuaShelfShelfIdLazyRoute,
  AppPerpetuaUserUserIdIndexLazyRoute: AppPerpetuaUserUserIdIndexLazyRoute,
  AppPerpetuaUserUserIdItemItemIdLazyRoute:
    AppPerpetuaUserUserIdItemItemIdLazyRoute,
  AppPerpetuaUserUserIdShelfShelfIdLazyRoute:
    AppPerpetuaUserUserIdShelfShelfIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/info",
        "/manager",
        "/swap/transaction",
        "/app/alexandrian",
        "/app/bibliotheca",
        "/app/dialectica",
        "/app/emporium",
        "/app/permasearch",
        "/app/syllogos",
        "/nft/$tokenId",
        "/swap/balance",
        "/swap/burn",
        "/swap/history",
        "/swap/insights",
        "/swap/receive",
        "/swap/redeem",
        "/swap/send",
        "/swap/stake",
        "/swap/swap",
        "/swap/topup",
        "/swap/",
        "/app/perpetua/",
        "/app/perpetua/item/$itemId",
        "/app/perpetua/shelf/$shelfId",
        "/app/perpetua/user/$userId/",
        "/app/perpetua/user/$userId/item/$itemId",
        "/app/perpetua/user/$userId/shelf/$shelfId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.lazy.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/app/pinax",
        "/_auth/app/imporium/listings",
        "/_auth/app/imporium/nfts",
        "/_auth/app/imporium/market-logs",
        "/_auth/app/imporium/marketplace",
        "/_auth/app/imporium/my-logs",
        "/_auth/app/imporium/"
      ]
    },
    "/info": {
      "filePath": "info/route.lazy.tsx",
      "children": [
        "/info/audit",
        "/info/faq",
        "/info/whitepaper",
        "/info/"
      ]
    },
    "/manager": {
      "filePath": "manager.lazy.tsx"
    },
    "/swap/transaction": {
      "filePath": "swap/transaction.tsx"
    },
    "/_auth/dashboard": {
      "filePath": "_auth/dashboard/route.lazy.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/dashboard/_librarian",
        "/_auth/dashboard/arweave-assets",
        "/_auth/dashboard/icp-assets",
        "/_auth/dashboard/profile",
        "/_auth/dashboard/settings"
      ]
    },
    "/app/alexandrian": {
      "filePath": "app/alexandrian.lazy.tsx"
    },
    "/app/bibliotheca": {
      "filePath": "app/bibliotheca.lazy.tsx"
    },
    "/app/dialectica": {
      "filePath": "app/dialectica.lazy.tsx"
    },
    "/app/emporium": {
      "filePath": "app/emporium.lazy.tsx"
    },
    "/app/permasearch": {
      "filePath": "app/permasearch.lazy.tsx"
    },
    "/app/syllogos": {
      "filePath": "app/syllogos.lazy.tsx"
    },
    "/info/audit": {
      "filePath": "info/audit.lazy.tsx",
      "parent": "/info"
    },
    "/info/faq": {
      "filePath": "info/faq.lazy.tsx",
      "parent": "/info"
    },
    "/info/whitepaper": {
      "filePath": "info/whitepaper.lazy.tsx",
      "parent": "/info"
    },
    "/nft/$tokenId": {
      "filePath": "nft.$tokenId.lazy.tsx"
    },
    "/swap/balance": {
      "filePath": "swap/balance.lazy.tsx"
    },
    "/swap/burn": {
      "filePath": "swap/burn.lazy.tsx"
    },
    "/swap/history": {
      "filePath": "swap/history.lazy.tsx"
    },
    "/swap/insights": {
      "filePath": "swap/insights.lazy.tsx"
    },
    "/swap/receive": {
      "filePath": "swap/receive.lazy.tsx"
    },
    "/swap/redeem": {
      "filePath": "swap/redeem.lazy.tsx"
    },
    "/swap/send": {
      "filePath": "swap/send.lazy.tsx"
    },
    "/swap/stake": {
      "filePath": "swap/stake.lazy.tsx"
    },
    "/swap/swap": {
      "filePath": "swap/swap.lazy.tsx"
    },
    "/swap/topup": {
      "filePath": "swap/topup.lazy.tsx"
    },
    "/info/": {
      "filePath": "info/index.lazy.tsx",
      "parent": "/info"
    },
    "/swap/": {
      "filePath": "swap/index.lazy.tsx"
    },
    "/_auth/dashboard/_librarian": {
      "filePath": "_auth/dashboard/_librarian/route.lazy.tsx",
      "parent": "/_auth/dashboard",
      "children": [
        "/_auth/dashboard/_librarian/wallets",
        "/_auth/dashboard/_librarian/"
      ]
    },
    "/_auth/app/pinax": {
      "filePath": "_auth/app/pinax.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/dashboard/arweave-assets": {
      "filePath": "_auth/dashboard/arweave-assets.lazy.tsx",
      "parent": "/_auth/dashboard"
    },
    "/_auth/dashboard/icp-assets": {
      "filePath": "_auth/dashboard/icp-assets.lazy.tsx",
      "parent": "/_auth/dashboard"
    },
    "/_auth/dashboard/profile": {
      "filePath": "_auth/dashboard/profile.lazy.tsx",
      "parent": "/_auth/dashboard",
      "children": [
        "/_auth/dashboard/profile/upgrade"
      ]
    },
    "/_auth/dashboard/settings": {
      "filePath": "_auth/dashboard/settings.lazy.tsx",
      "parent": "/_auth/dashboard"
    },
    "/app/perpetua/": {
      "filePath": "app/perpetua/index.lazy.tsx"
    },
    "/_auth/app/imporium/listings": {
      "filePath": "_auth/app/imporium/listings.tsx",
      "parent": "/_auth"
    },
    "/_auth/app/imporium/nfts": {
      "filePath": "_auth/app/imporium/nfts.tsx",
      "parent": "/_auth"
    },
    "/_auth/app/imporium/market-logs": {
      "filePath": "_auth/app/imporium/market-logs.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/app/imporium/marketplace": {
      "filePath": "_auth/app/imporium/marketplace.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/app/imporium/my-logs": {
      "filePath": "_auth/app/imporium/my-logs.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/dashboard/_librarian/wallets": {
      "filePath": "_auth/dashboard/_librarian/wallets.lazy.tsx",
      "parent": "/_auth/dashboard/_librarian"
    },
    "/_auth/dashboard/profile/upgrade": {
      "filePath": "_auth/dashboard/profile.upgrade.lazy.tsx",
      "parent": "/_auth/dashboard/profile"
    },
    "/app/perpetua/item/$itemId": {
      "filePath": "app/perpetua/item.$itemId.lazy.tsx"
    },
    "/app/perpetua/shelf/$shelfId": {
      "filePath": "app/perpetua/shelf.$shelfId.lazy.tsx"
    },
    "/_auth/app/imporium/": {
      "filePath": "_auth/app/imporium/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/dashboard/_librarian/": {
      "filePath": "_auth/dashboard/_librarian/index.lazy.tsx",
      "parent": "/_auth/dashboard/_librarian"
    },
    "/app/perpetua/user/$userId/": {
      "filePath": "app/perpetua/user/$userId/index.lazy.tsx"
    },
    "/app/perpetua/user/$userId/item/$itemId": {
      "filePath": "app/perpetua/user/$userId/item.$itemId.lazy.tsx"
    },
    "/app/perpetua/user/$userId/shelf/$shelfId": {
      "filePath": "app/perpetua/user/$userId/shelf.$shelfId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
