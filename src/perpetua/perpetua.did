type AddItemInput = record {
  content : ItemContent;
  reference_item_id : opt nat32;
  before : bool;
};
type BackupPaginationInput = record { offset : nat64; limit : nat64 };
type CursorPaginatedResult = record {
  limit : nat;
  next_cursor : opt nat64;
  items : vec ShelfPublic;
};
type CursorPaginatedResult_1 = record {
  limit : nat;
  next_cursor : opt record { nat64; text };
  items : vec text;
};
type CursorPaginatedResult_2 = record {
  limit : nat;
  next_cursor : opt nat32;
  items : vec Item;
};
type CursorPaginatedResult_3 = record {
  limit : nat;
  next_cursor : opt record { text; text };
  items : vec text;
};
type CursorPaginatedResult_4 = record {
  limit : nat;
  next_cursor : opt text;
  items : vec text;
};
type CursorPaginationInput = record { cursor : opt nat64; limit : nat };
type CursorPaginationInput_1 = record {
  cursor : opt record { nat64; text };
  limit : nat;
};
type CursorPaginationInput_2 = record { cursor : opt nat32; limit : nat };
type CursorPaginationInput_3 = record {
  cursor : opt record { text; text };
  limit : nat;
};
type CursorPaginationInput_4 = record { cursor : opt text; limit : nat };
type Item = record { id : nat32; content : ItemContent };
type ItemContent = variant { Nft : text; Shelf : text; Markdown : text };
type OffsetPaginatedResult = record {
  offset : nat;
  limit : nat;
  items : vec ShelfPublic;
  total_count : nat;
};
type OffsetPaginationInput = record { offset : nat; limit : nat };
type QueryError = variant {
  TagNotFound;
  InvalidCursor;
  ShelfNotFound;
  InvalidTimeRange;
  UserNotFound;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_10 = variant { Ok : CursorPaginatedResult_4; Err : QueryError };
type Result_11 = variant { Ok : OffsetPaginatedResult; Err : QueryError };
type Result_12 = variant { Ok : bool; Err : text };
type Result_2 = variant { Ok : CursorPaginatedResult; Err : QueryError };
type Result_3 = variant { Ok : vec text; Err : QueryError };
type Result_4 = variant { Ok : vec principal; Err : QueryError };
type Result_5 = variant { Ok : CursorPaginatedResult_1; Err : QueryError };
type Result_6 = variant { Ok : ShelfPublic; Err : QueryError };
type Result_7 = variant { Ok : CursorPaginatedResult_2; Err : QueryError };
type Result_8 = variant { Ok : ShelfPositionMetrics; Err : text };
type Result_9 = variant { Ok : CursorPaginatedResult_3; Err : QueryError };
type ShelfBackupData = record {
  is_public : bool;
  title : text;
  owner : principal;
  tags : vec text;
  description : opt text;
  shelf_id : text;
  item_positions : vec record { nat32; float64 };
  items : vec record { nat32; Item };
};
type ShelfPositionMetrics = record {
  min_gap : float64;
  avg_gap : float64;
  max_gap : float64;
  item_count : nat64;
};
type ShelfPublic = record {
  is_public : bool;
  title : text;
  updated_at : nat64;
  owner : principal;
  appears_in : vec text;
  tags : vec text;
  description : opt text;
  created_at : nat64;
  shelf_id : text;
  item_positions : vec record { nat32; float64 };
  items : vec record { nat32; Item };
};
type ShelvesEssentialBackupChunk = record {
  data : vec ShelfBackupData;
  total_count : nat64;
};
type TagOperationInput = record { tag : text; shelf_id : text };
service : () -> {
  add_item_to_shelf : (text, AddItemInput) -> (Result);
  add_tag_to_shelf : (TagOperationInput) -> (Result);
  backup_get_essential_shelves : (BackupPaginationInput) -> (
      ShelvesEssentialBackupChunk,
    ) query;
  create_and_add_shelf_item : (text, text, opt text) -> (Result_1);
  follow_tag : (text) -> (Result);
  follow_user : (principal) -> (Result);
  get_followed_tags_feed : (CursorPaginationInput) -> (Result_2) query;
  get_followed_users_feed : (CursorPaginationInput) -> (Result_2) query;
  get_my_followed_tags : () -> (Result_3) query;
  get_my_followed_users : () -> (Result_4) query;
  get_popular_tags : (CursorPaginationInput_1) -> (Result_5) query;
  get_recent_shelves : (CursorPaginationInput) -> (Result_2) query;
  get_shelf : (text) -> (Result_6) query;
  get_shelf_items : (text, CursorPaginationInput_2) -> (Result_7) query;
  get_shelf_position_metrics : (text) -> (Result_8) query;
  get_shelves_by_tag : (text, CursorPaginationInput_3) -> (Result_9) query;
  get_shelves_containing_nft : (text) -> (vec text) query;
  get_tag_shelf_count : (text) -> (nat64) query;
  get_tags_with_prefix : (text, CursorPaginationInput_4) -> (Result_10) query;
  get_user_shelves : (principal, OffsetPaginationInput) -> (Result_11) query;
  is_shelf_public : (text) -> (Result_12) query;
  remove_item_from_shelf : (text, nat32) -> (Result);
  remove_tag_from_shelf : (TagOperationInput) -> (Result);
  reorder_profile_shelf : (text, opt text, bool) -> (Result);
  reset_profile_order : () -> (Result);
  restore_essential_shelves : (ShelvesEssentialBackupChunk) -> (Result);
  set_item_order : (text, vec nat32) -> (Result);
  store_shelf : (text, opt text, vec Item, opt vec text) -> (Result_1);
  toggle_shelf_public_access : (text, bool) -> (Result);
  unfollow_tag : (text) -> (Result);
  unfollow_user : (principal) -> (Result);
  update_shelf_metadata : (text, opt text, opt text) -> (Result);
}
