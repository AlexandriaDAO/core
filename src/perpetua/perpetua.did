type AddItemInput = record {
  content : ItemContent;
  reference_item_id : opt nat32;
  before : bool;
};
type Item = record { id : nat32; content : ItemContent };
type ItemContent = variant { Nft : text; Shelf : text; Markdown : text };
type ItemReorderInput = record {
  reference_item_id : opt nat32;
  before : bool;
  item_id : nat32;
};
type QueryError = variant {
  TagNotFound;
  ShelfNotFound;
  UnauthorizedAccess;
  NftNotFound;
  InvalidTimeRange;
  UserNotFound;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok : vec Shelf; Err : QueryError };
type Result_4 = variant { Ok : Shelf; Err : QueryError };
type Result_5 = variant { Ok : vec Item; Err : QueryError };
type Result_6 = variant { Ok : ShelfPositionMetrics; Err : text };
type Result_7 = variant { Ok : vec principal; Err : text };
type Shelf = record {
  title : text;
  updated_at : nat64;
  editors : vec principal;
  owner : principal;
  appears_in : vec text;
  tags : vec text;
  description : opt text;
  created_at : nat64;
  shelf_id : text;
  rebalance_count : nat32;
  item_positions : vec record { nat32; float64 };
  items : vec record { nat32; Item };
  needs_rebalance : bool;
};
type ShelfPositionMetrics = record {
  min_gap : float64;
  rebalance_count : nat32;
  avg_gap : float64;
  max_gap : float64;
  needs_rebalance : bool;
  item_count : nat64;
};
type TagOperation = record { tag : text; shelf_id : text };
type TagSystemMetrics = record {
  unused_tags_count : nat64;
  avg_tag_per_shelf : float64;
  total_unique_tags : nat64;
  most_popular_tags : vec record { text; nat64 };
  total_tag_references : nat64;
};
service : {
  add_item_to_shelf : (text, AddItemInput) -> (Result);
  add_shelf_editor : (text, principal) -> (Result);
  add_tag_to_shelf : (TagOperation) -> (Result);
  cleanup_unused_tags : () -> (Result_1);
  create_and_add_shelf_item : (text, text, opt text) -> (Result_2);
  get_popular_tags : (nat64, nat32) -> (vec record { text; nat64 }) query;
  get_recent_shelves : (opt nat64, opt nat64) -> (Result_3) query;
  get_shelf : (text) -> (Result_4) query;
  get_shelf_items : (text) -> (Result_5) query;
  get_shelf_position_metrics : (text) -> (Result_6) query;
  get_shelves_by_tag : (text, nat64, nat32) -> (Result_3) query;
  get_tag_shelf_count : (text) -> (nat64) query;
  get_tag_system_metrics : () -> (TagSystemMetrics) query;
  get_tags_with_prefix : (text, nat32) -> (vec text) query;
  get_user_shelves : (principal, opt nat64) -> (Result_3) query;
  list_shelf_editors : (text) -> (Result_7) query;
  rebalance_shelf_items : (text) -> (Result);
  remove_item_from_shelf : (text, nat32) -> (Result);
  remove_shelf_editor : (text, principal) -> (Result);
  remove_tag_from_shelf : (TagOperation) -> (Result);
  reorder_profile_shelf : (text, opt text, bool) -> (Result);
  reorder_shelf_item : (text, ItemReorderInput) -> (Result);
  reset_profile_order : () -> (Result);
  store_shelf : (text, opt text, vec Item, opt vec text) -> (Result_2);
  update_shelf_metadata : (text, opt text, opt text) -> (Result);
  update_tag_popularity_batch : () -> (Result_1);
}
