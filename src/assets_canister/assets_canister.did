type AssetError = variant {
  InvalidChunkIndex;
  NotFound;
  Unauthorized;
  AlreadyExists;
  AssetTooLarge;
  ChunkTooLarge;
};
type AssetMetadata = record {
  owner : principal;
  transaction : Transaction;
  content_type : text;
  nft_token : text;
  created_at : nat64;
  total_size : nat64;
  chunk_count : nat64;
};
type Result = variant { Ok; Err : AssetError };
type Result_1 = variant { Ok : AssetMetadata; Err : AssetError };
type Result_2 = variant { Ok : blob; Err : AssetError };
type Result_3 = variant { Ok : text; Err : AssetError };
type Tag = record { value : text; name : text };
type Transaction = record {
  owner : text;
  date : nat64;
  size : nat64;
  tags : vec Tag;
};
service : {
  delete_asset : (nat) -> (Result);
  get_asset_metadata : (nat) -> (Result_1) query;
  get_chunk : (nat, nat64) -> (Result_2) query;
  initialize_asset : (nat, text, nat64, text, text, vec Tag) -> (Result_3);
  store_chunk : (nat, nat64, blob) -> (Result);
}
